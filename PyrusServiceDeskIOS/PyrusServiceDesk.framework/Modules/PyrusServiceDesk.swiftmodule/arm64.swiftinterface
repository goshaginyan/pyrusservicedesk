// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PyrusServiceDesk
import AVFoundation
import AVKit
import Compression
import Foundation
import ImageIO
import MobileCoreServices
import Photos
@_exported import PyrusServiceDesk
import Swift
import UIKit
import WebKit
import zlib
@_inheritsConvenienceInitializers @objc public class ServiceDeskConfiguration : ObjectiveC.NSObject {
  @objc public var chatTitle: Swift.String?
  @objc public var themeColor: UIKit.UIColor?
  @objc public var welcomeMessage: Swift.String?
  @objc public var avatarForSupport: UIKit.UIImage?
  @objc public var userName: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var chatTitleView: UIKit.UIView?
  @objc public var customRightBarButtonItem: UIKit.UIBarButtonItem?
  @objc public var customLeftBarButtonItem: UIKit.UIBarButtonItem?
  @objc public var infoView: PyrusServiceDesk.PSDInfoView?
  @objc public func setStatusBarStyle(_ barStyle: UIKit.UIStatusBarStyle, _ darkBarStyle: UIKit.UIStatusBarStyle)
  @objc public func setKeyboardAppearance(_ keyboardAppearance: UIKit.UIKeyboardAppearance, _ darkKeyboardAppearance: UIKit.UIKeyboardAppearance)
  @objc public func setKeyboardColor(_ color: UIKit.UIColor)
  @objc public func setFontName(_ fontName: Swift.String?)
  @objc public func setUserTextColor(_ color: UIKit.UIColor?)
  @objc public func setUserMessageBackgroundColor(_ color: UIKit.UIColor?)
  @objc public func setSupportTextColor(_ color: UIKit.UIColor?)
  @objc public func setSupportMessageBackgroundColor(_ color: UIKit.UIColor?)
  @objc public func setChatTitleColor(_ color: UIKit.UIColor?)
  @objc public func setToolbarStyle(_ barStyle: UIKit.UIBarStyle, _ darkBarStyle: UIKit.UIBarStyle)
  @objc public func setToolbarColor(_ color: UIKit.UIColor?)
  @objc public func setToolbarButtonColor(_ color: UIKit.UIColor?)
  @objc public func setBackgroundColor(_ color: UIKit.UIColor?)
  @objc public func setAttachmentMenuTextColor(_ color: UIKit.UIColor?)
  @objc public func setAttachmentMenuButtonColor(_ color: UIKit.UIColor?)
  @objc public func setSendButtonColor(_ color: UIKit.UIColor?)
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol OnStopCallback {
  @objc func onStop()
}
@objc public protocol FileChooser {
  @objc var label: Swift.String { get set }
  @objc weak var chooserDelegate: PyrusServiceDesk.FileChooserDelegate? { get set }
}
@objc public protocol FileChooserDelegate {
  @objc func didEndWithSuccess(_ data: Foundation.Data?, url: Foundation.URL?)
  @objc func didEndWithCancel()
}
@objc public protocol NewReplySubscriber {
  @objc func onNewReply(hasUnreadComments: Swift.Bool, lastCommentText: Swift.String?, lastCommentAttachmentsCount: Swift.Int, lastCommentAttachments: [Swift.String]?, utcTime: Swift.Double)
}
@objc public protocol LogEvents {
  @objc func logPyrusServiceDesk(event: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class PSDInfoView : UIKit.UIView {
  @objc override dynamic public func removeFromSuperview()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @objc public class PyrusServiceDesk : ObjectiveC.NSObject {
  public static var PSD_CLOSED_NOTIFICATION_NAME: Swift.String
  @objc public static func setPushToken(_ token: Swift.String?, completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public static func start(on viewController: UIKit.UIViewController, onStopCallback: PyrusServiceDesk.OnStopCallback? = nil)
  @objc public static func start(on viewController: UIKit.UIViewController, configuration: PyrusServiceDesk.ServiceDeskConfiguration?, onStopCallback: PyrusServiceDesk.OnStopCallback? = nil)
  @objc public static func start(on viewController: UIKit.UIViewController, configuration: PyrusServiceDesk.ServiceDeskConfiguration?, completion: (() -> Swift.Void)? = nil, onStopCallback: PyrusServiceDesk.OnStopCallback? = nil)
  @objc public static func stop()
  @objc public static var onAuthorizationFailed: (() -> Swift.Void)?
  @objc public static func subscribeToReplies(_ subscriber: PyrusServiceDesk.NewReplySubscriber?)
  @objc public static func unsubscribeFromReplies(_ subscriber: PyrusServiceDesk.NewReplySubscriber?)
  @objc public static func subscribeToGogEvents(_ subscriber: PyrusServiceDesk.LogEvents)
  @objc public static func createWith(_ clientId: Swift.String?, loggingEnabled: Swift.Bool = false)
  @objc public static func createWith(_ clientId: Swift.String?, reset: Swift.Bool, loggingEnabled: Swift.Bool = false)
  @objc public static func createWith(_ clientId: Swift.String?, userId: Swift.String?, securityKey: Swift.String?, loggingEnabled: Swift.Bool = false)
  @objc public static func refresh(onError: ((Swift.Error?) -> Swift.Void)? = nil)
  @objc public static func refreshFromPush(messageId: Swift.Int)
  @objc public static func present(_ viewController: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)?)
  @objc public static func registerFileChooser(_ chooser: (UIKit.UIViewController & PyrusServiceDesk.FileChooser)?)
  @objc deinit
  @objc override dynamic public init()
}
